" Global settings for all files (but may be overridden in ftplugin)

"""Vim-plug
call plug#begin('~/.vim/plugged')
Plug 'sjl/gundo.vim'
Plug 'rking/ag.vim'
Plug 'wikitopian/hardmode'
Plug 'francoiscabrol/ranger.vim'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'tacahiroy/ctrlp-funky'
Plug 'morhetz/gruvbox'
"Plug 'Valloric/YouCompleteMe'
Plug 'itchyny/lightline.vim'
Plug 'KabbAmine/vCoolor.vim'
Plug 'mattn/emmet-vim'
Plug 'hail2u/vim-css3-syntax'
Plug 'tpope/vim-surround'
call plug#end()

"""Styling
syntax enable " enable syntax processing
" highlight ExtraWhitespace
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=darkgreen guibg=darkgreen
colorscheme gruvbox
if $TERM == "xterm-termite"
  set termguicolors
  set background=light
  let g:gruvbox_contrast_light='medium'
  let g:gruvbox_invert_selection=0
endif
set listchars=trail:~,space:Â·
"highlight Cursor guifg=white guibg=black
"highlight iCursor guifg=white guibg=steelblue
match Todo /\s\+$/ " highlight trailing whitespace
match ExtraWhiteSpace /\s\+$/ "mark trailing whitespace as ExtraWhitespace

"""Spaces & Tabs

set tabstop=2 " number of spaces per TAB when reading a file
set shiftwidth=2 " number of spaces when indenting with >
set expandtab " when using tab, insert spaces

"""UI config

set number " show line numbers
set relativenumber " show relative line numbers
set showcmd " show last command in bottom bar
set cursorline " highlight current line
filetype plugin indent on " load filetype specific indent files
set wildmenu " visual autocomplete for command menu
set lazyredraw " redraw only when we need to
set showmatch " highlight matching [{()}]
set completeopt-=preview " do not show preview of function when using autocomplete

"""Searching

set incsearch " search as characters are entered
set hlsearch " highlight matches

"""Folding

set foldenable " enable folding
set foldlevelstart=10 " open folds of up to 10 lines by default
set foldnestmax=6 " set max number of nested folds to 6
" space open/close folds
" nnoremap <space> za
set foldmethod=indent " fold based on indent level

"""Moving

" move vertically by visual line
nnoremap j gj
nnoremap k gk
" move easier between splits
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
" highlight last inserted text
nnoremap gV `[v`]
" make backspace work like most programs "
set backspace=indent,eol,start

"""Navigation

" use F5 to quickly change buffer
" :nnoremap <F5> :buffers<CR>:buffer<Space>
" ignore the following files
set wildignore+=*.a,*.o
set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png,*.svg
"set wildgnore+=.git
set wildignore+=*~,*.swp,*.tmp
" select buffer files
nnoremap <C-b> :CtrlPBuffer<CR>

"""Leader shortcuts and remaps

let mapleader="," " leader is comma
nnoremap <leader>u :GundoToggle<CR>
" edit vimrc/zshrc
nnoremap <leader>ev :bo sp $MYVIMRC<CR>
nnoremap <leader>ez :bo sp ~/.zshrc<CR>
" source vimrc/zshrc 
nnoremap <leader>sv :source $MYVIMRC<CR>
nnoremap <leader>sz :source ~/.vimrc<CR>
" use the silver searcher
nnoremap <leader>ag :Ag
" clear last used search pattern
nnoremap <leader><space> :let @/ = ""<CR>
" quit window
nnoremap <leader>qq :q<CR>
" quit vim
nnoremap <leader>qa :qa<CR>
" write buffer and quit window
nnoremap <leader>wq :wq<CR>
" write buffer
nnoremap <leader>ww :w<CR>
" yank and paste text to X11 clipboard
nnoremap <leader>y "*y
nnoremap <leader>p "*p
" list special characters (listchars)
nnoremap <leader>l :set list!<CR>
" shortcut for ctrlp-funky
nnoremap <leader>fu :CtrlPFunky<CR>
" shortcut for ranger.vim
let g:ranger_map_keys = 0
nnoremap <leader>ff :Ranger<CR>
" shortcut for inserting single character
nnoremap <space> i_<ESC>r
"buffer navigation
nnoremap <leader>b :bp<CR>
nnoremap <leader>n :bn<CR>
"delete buffer without closing window
nnoremap <leader>d :b#\|bd #<CR>
"cd ~
nnoremap <leader>ch :cd ~<CR>
"cd to current's file folder
nnoremap <leader>cc :cd %:h<CR>
""
" search for pattern globally and with confirmation
nnoremap <leader>r :%s:::gc<left><left><left><left>
" include grouping (i.e '\(\)') in search pattern"
cmap ;\ \(\)<Left><Left>
"""Insert mode remaps
inoremap " ""<left>
inoremap ' ''<left>
inoremap ` ``<left>
inoremap ( ()<left>
inoremap [ []<left>
inoremap { {}<left>
inoremap [<CR> [<CR>]<ESC>O
inoremap {<CR> {<CR>}<ESC>O
inoremap ,. <right>
inoremap ., <left>
inoremap "" ""
inoremap '' ''
inoremap `` `` 
inoremap () ()
inoremap [] []
inoremap {} {}

"" resize split windows
"width
"map <C-<> <C-w><
"map <C->> <C-w>>
"height
"map <C-+> <C-w>+
"map <C--> <C-w>-

"""YCM Config
let g:ycm_server_python_interpreter = '/usr/bin/python2'

"""CtrlP config
nnoremap <C-a> :CtrlP
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git'
let g:ctrlp_show_hidden = 1

"""VCoolor config
let g:vcoolor_lowercase = 1
let g:vcoolor_disable_mappings = 1
nnoremap <leader>c :VCoolor<CR>

"""lightline config
set laststatus=2
set noshowmode
let g:lightline = {
  \'colorscheme': 'jellybeans',
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ],
  \             [ 'readonly', 'filename', 'modified', 'exampleComponent' ] ]
  \ },
  \ 'component': {
  \   'exampleComponent': ''
  \ },
  \ 'component_function': {
  \   'filename': 'LightLineFilename'
  \ }
  \ }
function! LightLineFilename()
  return expand('%')
endfunction

""" emmet config
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall
